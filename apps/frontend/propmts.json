[
	{
		"prompt": "Generate the frontend for a React single-page application (SPA) using vanilla CSS (no frameworks like Tailwind).\n\nThe project structure is already set up in a monorepo with React (frontend) and Node.js (backend).\nUser authentication is handled entirely on the backend using Stytch, so the frontend will only consume authentication state (e.g. from a cookie or context provided by the backend).\n\nThe SPA should include the following routes using React Router:\n1. /login: A simple login page with a button to trigger authentication (e.g., redirects or opens magic link flow handled by backend). If already authenticated, redirect to /.\n2. /: The Home page where a logged-in user can upload a .eml file. Show a clean file upload UI (accept .eml only) and a “Submit” button. When submitted, send the file to the backend at /api/analyze-email and redirect to /result.\n3. /result: Displays the result of the phishing analysis (consume from backend, display as “Safe”, “Suspicious”, or “Phishing” with a short summary).\n\n✅ The app should:\n• Use React Router for navigation\n• Protect the / and /result routes (require authentication)\n• Use vanilla CSS, clean and minimal\n• Include a simple Header component showing “Logged in as [email]” and a “Logout” button on authenticated routes\n\nAssume that auth state (e.g. user session) is provided via HTTP-only cookies or backend session.",
		"result": "Built React SPA with protected routes and clean UI. Implemented login flow, file upload for .eml files, and result display. Header shows user info and logout. All styled with vanilla CSS."
	},
	{
		"prompt": "create a types folder and move all the types or interfaces to there",
		"result": "Refactored codebase to centralize type definitions. Created types folder and moved all interfaces and types for better organization and reusability."
	},
	{
		"prompt": "check all the css files and the ones that are global styles add them to the index.css, also check the components folder and the pages folder and add the styles to the index.css",
		"result": "Standardized CSS structure by moving global styles to index.css. Enhanced theme variables and layout properties for consistent styling across components."
	},
	{
		"prompt": "make the login work, the route on the back that is going to use is /api/auth/login this is going to send a magic link to the user, disable the button for 15 sec, while is disable put on the button 'you can resend a magic link in: n seconds' after that change the button to resend, the auth is provided via HTTP-only cookies",
		"result": "Implemented login functionality with magic link flow. Added countdown timer for resend button, email validation, and proper error handling. Authentication uses HTTP-only cookies."
	},
	{
		"prompt": "create a page /authenticate that is going to receive a param, extract the token param and send it to /api/authenticate?token=[token value] and when the respond of the back is good redirect to home",
		"result": "Created Authenticate component to handle magic link verification. Implemented token extraction from URL and authentication flow with proper redirection."
	},
	{
		"prompt": "change the app to stop using demo data and start using the api, the auth is provided via HTTP-only cookies",
		"result": "Refactored app to use real API endpoints instead of demo data. Enhanced authentication flow with proper session handling using HTTP-only cookies."
	},
	{
		"prompt": "make the home component work, use @api_test.http to see the endpoints you need to use ",
		"result": "Integrated Home component with backend API endpoints. Implemented file upload functionality and proper error handling for email analysis."
	},
	{
		"prompt": "change to home to components, one is the component tu upload the .eml y the other is the component of the result, with this changes the route /result is not necessary",
		"result": "Split Home into UploadForm and ResultView components. Removed separate result route for better UX. Enhanced component structure with proper state management."
	},
	{
		"prompt": "search all the css classes that aren't use and delete them, check on the components, pages and app.css",
		"result": "Cleaned up CSS files by removing unused classes. Optimized styles across components and pages for better maintainability."
	},
	{
		"prompt": "@UploadForm.tsx do something similar for the error handle on for the login, i want the login to match the uploadFrom",
		"result": "Enhanced login component with consistent error handling pattern matching UploadForm. Improved form submission and user feedback."
	}
]
